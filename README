py-diffraction readme

copyleft: Maciej Chudak, july 2011
           [don't try to read my name correctly,
            it's in an unspeakable language of Slavs]


1. Beautiful art. It's good for you!


                             computed area
 -- -- -- -- -- -- -- -- -- -*************- --
   ^                   |     |           |
   |
   |                   |---->|---------->|
   |h              test_start   test_len
   |                   |
   v 
 -- -- -- -- -|   the shutter   |- -- -- -- --

              |<-------|------->|
                  d/2     d/2


2. Vague description.

Code generates [points] of numbers representing light
intensity seen in the computed area of the screen,
as a function of distance from one of it's ends.

3. Method.

The shutter is divided into [n] fragments that emit waves
beginning with the same phase [ct], with amplitudes proportional
to 1/[n], that travel to the computed points beating various
distances [L]. The computed intensity is a sum of all the waves'
amplitudes divided by their's [L]'s.

4. Are the results worth a penny?

[most boring and IMPORTANT part, arrrgh]

Maybe. I don't guarantee that my method is ok, I didn't compare
it to any book or experiment data YET, so use my code with
the possibility in mind, that it might give wrong results.

I briefly did some far-screen simulations and it prosuced a nice
sinc^2 function, so it probably can simulate at least Fraunhofer
diffraction (google it! :), but still: the shape may look good,
but it might have wrong amplitudes or frequency.

Yet, as far as I tested it on random data I've came up only with
one thing: you should always divide the shutter in so many points,
that the distances between them will be less than 1/4 of the wave-
length. ( d/n < lamb/4 )

example: with 400 nm light (blue~ish) it would be wise to use about
40 nm distances, if you want to compute 10^5 waves at most (per
point!), that gives you a maximum shutter length of
4*10^-8 m *10^5 = 4 mm.
